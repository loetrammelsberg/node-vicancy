// @flow
// Generated using flowgen2

import type {Headers} from 'http-basic/lib/Headers';
import type {ICache} from 'http-basic/lib/ICache';
const Response = require('http-response-object');
import type {CachedResponse} from 'http-basic/lib/CachedResponse';

interface Options {
  allowRedirectHeaders?: Array<string>,
  cache?: 'file' | 'memory' | ICache,
  followRedirects?: boolean,
  gzip?: boolean,
  headers?: Headers,
  maxRedirects?: number,
  maxRetries?: number,
  retry?:
    | boolean
    | ((
        err: ErrnoError | null,
        res: Response<stream$Readable | Buffer | string> | void,
        attemptNumber: number,
      ) => boolean),
  retryDelay?:
    | number
    | ((
        err: ErrnoError | null,
        res: Response<stream$Readable | Buffer | string> | void,
        attemptNumber: number,
      ) => number),
  socketTimeout?: number,
  timeout?: number,
  isMatch?: (
    requestHeaders: Headers,
    cachedResponse: CachedResponse,
    defaultValue: boolean,
  ) => boolean,
  isExpired?: (
    cachedResponse: CachedResponse,
    defaultValue: boolean,
  ) => boolean,
  canCache?: (res: Response<stream$Readable>, defaultValue: boolean) => boolean,
  qs?: {[key: string]: any},
  json?: any,
  body?: string | Buffer,
}

export type {Options};
